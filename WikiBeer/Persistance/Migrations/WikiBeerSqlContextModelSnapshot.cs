// <auto-generated />
using System;
using Ipme.WikiBeer.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ipme.WikiBeer.Persistance.Migrations
{
    [DbContext(typeof(WikiBeerSqlContext))]
    partial class WikiBeerSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ipme.WikiBeer.Entities.AssociationTables.BeerIngredient", b =>
                {
                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BeerId");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IngredientId");

                    b.HasKey("BeerId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("BeerIngredient", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.AssociationTables.UserBeer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BeerId");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("UserBeer", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerColorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ColorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("ColorId");

                    b.ToTable("BeerColor", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BeerId");

                    b.Property<Guid?>("BreweryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Degree")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<float?>("Ibu")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("BeerId");

                    b.HasIndex("BreweryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("StyleId");

                    b.ToTable("Beer", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerStyleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StyleId");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("StyleId");

                    b.ToTable("BeerStyle", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BreweryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BreweryId");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("BreweryId");

                    b.HasIndex("CountryId");

                    b.ToTable("Brewery", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("CountryId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.Ingredients.IngredientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IngredientId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("IngredientId");

                    b.ToTable("Ingredient", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("IngredientEntity");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HashCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("bit");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("UserId");

                    b.HasIndex("CountryId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.Ingredients.AdditiveEntity", b =>
                {
                    b.HasBaseType("Ipme.WikiBeer.Entities.Ingredients.IngredientEntity");

                    b.Property<string>("Use")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasDiscriminator().HasValue("Additive");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.Ingredients.CerealEntity", b =>
                {
                    b.HasBaseType("Ipme.WikiBeer.Entities.Ingredients.IngredientEntity");

                    b.Property<float>("Ebc")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Cereal");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.Ingredients.HopEntity", b =>
                {
                    b.HasBaseType("Ipme.WikiBeer.Entities.Ingredients.IngredientEntity");

                    b.Property<float>("AlphaAcid")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Hop");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.AssociationTables.BeerIngredient", b =>
                {
                    b.HasOne("Ipme.WikiBeer.Entities.BeerEntity", "Beer")
                        .WithMany("BeerIngredients")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ipme.WikiBeer.Entities.Ingredients.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.AssociationTables.UserBeer", b =>
                {
                    b.HasOne("Ipme.WikiBeer.Entities.BeerEntity", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ipme.WikiBeer.Entities.UserEntity", "User")
                        .WithMany("UserBeers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerEntity", b =>
                {
                    b.HasOne("Ipme.WikiBeer.Entities.BreweryEntity", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ipme.WikiBeer.Entities.BeerColorEntity", "Color")
                        .WithMany("Beers")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ipme.WikiBeer.Entities.BeerStyleEntity", "Style")
                        .WithMany("Beers")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brewery");

                    b.Navigation("Color");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BreweryEntity", b =>
                {
                    b.HasOne("Ipme.WikiBeer.Entities.CountryEntity", "Country")
                        .WithMany("Breweries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.UserEntity", b =>
                {
                    b.HasOne("Ipme.WikiBeer.Entities.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerColorEntity", b =>
                {
                    b.Navigation("Beers");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerEntity", b =>
                {
                    b.Navigation("BeerIngredients");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BeerStyleEntity", b =>
                {
                    b.Navigation("Beers");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.BreweryEntity", b =>
                {
                    b.Navigation("Beers");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.CountryEntity", b =>
                {
                    b.Navigation("Breweries");
                });

            modelBuilder.Entity("Ipme.WikiBeer.Entities.UserEntity", b =>
                {
                    b.Navigation("UserBeers");
                });
#pragma warning restore 612, 618
        }
    }
}
